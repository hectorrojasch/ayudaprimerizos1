1- generar ambas tablas relacionadas

1.1 rails db:migrate

1.2 crear el seed

# tags = Tag.create([{ name: '' }, { name: '' }, { name: '' }, { name: '' }, { name: '' }, { name: ''}, { name: '' }, { name: '' }]) 

1.3 rails db:seed

2- mod modelos 

Implementación de relaciones N a N con tres modelos
(has_many :through)

1- modelo article

	has_many :article_tags, dependent: :destroy
   has_many :tags, through: :article_tags

2- modelo tag 

	has_many :article_tags, dependent: :destroy
   has_many :articles, through: :article_tags

3- generar tabla intermedia

rails g migration CreateArticleTagTable

3.1- pegar en migración 

class CreateArticleTagTable < ActiveRecord::Migration[7.0]
  def change
  #  create_table :article_tag_tables do |t|

      create_join_table :articles, :tags

   #   t.timestamps
   # end
  end
end

4 rails db:migrate


5 agregar la vista  article el tag por medio de checkboxes


_form


form.collection_checkboxes :tag_id(s) o :tags,
        Tag.all,
        :id,
        :name %>

 ver configuración especial en imágenes     

 _articles



7 Agregar strong params de articles controller 
{tag_ids:[]}  ó {tags_id:[]}, parece primero

8- pag 12 Ya teniendo el parcial del formulario, solo debemos llamarlo en nuestras respectivas vistas de new.html.erb y edit.html.erb, pasando las variable necesarias al parcial
  